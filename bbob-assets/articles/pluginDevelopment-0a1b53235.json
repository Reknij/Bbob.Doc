{"title":"Plugin Development","date":"2022-02-13 12:17:49Z","categories":["Plugin"],"order":3,"toc":"\u003Cul class=\u0022toc-list\u0022\u003E\u003Cli class=\u0022toc-item toc-item-level-1\u0022\u003E\u003Ca href=\u0022#Install classlib from Nuget\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E1.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003EInstall classlib from Nuget\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\n\u003Cli class=\u0022toc-item toc-item-level-1\u0022\u003E\u003Ca href=\u0022#Interface\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E2.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003EInterface\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\u003Cli class=\u0022toc-item toc-item-level-1\u0022\u003E\u003Ca href=\u0022#PluginHelper\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E3.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003EPluginHelper\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\u003Cli class=\u0022toc-item toc-item-level-1\u0022\u003E\u003Ca href=\u0022#PluginHelper build-in objects\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E4.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003EPluginHelper build-in objects\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\u003Cul class=\u0022toc-list\u0022\u003E\u003Cli class=\u0022toc-item toc-item-level-2\u0022\u003E\u003Ca href=\u0022#Command generate\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E4.1.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003ECommand generate\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\n\u003C/uL\u003E\u003Cli class=\u0022toc-item toc-item-level-1\u0022\u003E\u003Ca href=\u0022#Command init\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E5.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003ECommand init\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\u003Cli class=\u0022toc-item toc-item-level-1\u0022\u003E\u003Ca href=\u0022#Command new\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E6.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003ECommand new\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\u003Cli class=\u0022toc-item toc-item-level-1\u0022\u003E\u003Ca href=\u0022#Command generate_2\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E7.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003ECommand generate\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\u003Cul class=\u0022toc-list\u0022\u003E\u003Cli class=\u0022toc-item toc-item-level-2\u0022\u003E\u003Ca href=\u0022#Initialize stage\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E7.1.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003EInitialize stage\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\n\u003Cli class=\u0022toc-item toc-item-level-2\u0022\u003E\u003Ca href=\u0022#Process stage\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E7.2.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003EProcess stage\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\u003Cli class=\u0022toc-item toc-item-level-2\u0022\u003E\u003Ca href=\u0022#Parse stage\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E7.3.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003EParse stage\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\u003Cli class=\u0022toc-item toc-item-level-2\u0022\u003E\u003Ca href=\u0022#FinalProcess stage\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E7.4.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003EFinalProcess stage\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\u003Cli class=\u0022toc-item toc-item-level-2\u0022\u003E\u003Ca href=\u0022#Confirm stage\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E7.5.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003EConfirm stage\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\u003C/uL\u003E\u003Cli class=\u0022toc-item toc-item-level-1\u0022\u003E\u003Ca href=\u0022#Command deploy\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E8.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003ECommand deploy\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\u003Cli class=\u0022toc-item toc-item-level-1\u0022\u003E\u003Ca href=\u0022#Command Complete\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E9.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003ECommand Complete\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\u003Cul class=\u0022toc-list\u0022\u003E\u003Cli class=\u0022toc-item toc-item-level-2\u0022\u003E\u003Ca href=\u0022#Notice\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E9.1.\u003C/span\u003E\n\u003Cspan class=\u0022toc-text\u0022\u003ENotice\u003C/span\u003E\u003C/a\u003E\n\u003C/li\u003E\n\n\u003C/ul\u003E","contentParsed":"\u003Carticle style=\u0022background-color: transparent;\u0022 class=\u0022markdown-body\u0022\u003E\u003Cdiv id=\u0027bbob-markdown-content\u0027\u003E\u003Ch1 id=\u0022Install classlib from Nuget\u0022\u003EInstall classlib from Nuget\u003C/h1\u003E\n\u003Cp\u003ELatest version is v1.1.0. Is compatible with Bbob Cli v1.3.0\u002B\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode\u003Edotnet add package Bbob.Plugin --version 1.1.0\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch1 id=\u0022Interface\u0022\u003EInterface\u003C/h1\u003E\n\u003Cp\u003ETo develop plugin must implement interface. You can find the \u003Ccode\u003EIPlugin.dll\u003C/code\u003E from current path Bbob.\u003C/p\u003E\n\u003Cp\u003EInterface have default implement \u003Cb\u003E(No do anything)\u003C/b\u003E, If your plugin no use target command, can no implement them.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode\u003Epublic class MyPlugin: IPlugin\n{\n    ...\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch1 id=\u0022PluginHelper\u0022\u003EPluginHelper\u003C/h1\u003E\n\u003Cp\u003EPluginHelper is important tool for developing. Please see PluginHelper document.\u003C/p\u003E\n\u003Ch1 id=\u0022PluginHelper build-in objects\u0022\u003EPluginHelper build-in objects\u003C/h1\u003E\n\u003Cp\u003EPluginHelper have build-in objects when invoke some commands.\u003C/p\u003E\n\u003Ch2 id=\u0022Command generate\u0022\u003ECommand generate\u003C/h2\u003E\n\u003Cp\u003EIt will build-in \u0027blog\u0027 object. This object will processed to js api.\u003C/p\u003E\n\u003Ch1 id=\u0022Command init\u0022\u003ECommand init\u003C/h1\u003E\n\u003Cp\u003ETo implement \u003Ccode\u003Einit\u003C/code\u003E:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode\u003Epublic void InitCommand()\n{\n    Console.WriteLine(\u0026quot;Bbob cli have running the init command\u0026quot;);\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch1 id=\u0022Command new\u0022\u003ECommand new\u003C/h1\u003E\n\u003Cp\u003ETo implement \u003Ccode\u003Enew\u003C/code\u003E:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode\u003Epublic void NewCommand(string filePath, ref string content, NewTypes types = NewTypes.blog){\n    Console.WriteLine(\u0026quot;Bbob cli have running the new command\u0026quot;);\n    Console.WriteLine(\u0026quot;New command option is \u0026quot; \u002B types);\n    content \u002B= \u0026quot;HelloWorld\u0026quot;\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch1 id=\u0022Command generate_2\u0022\u003ECommand generate\u003C/h1\u003E\n\u003Cp\u003E\u003Ccode\u003Egenerate\u003C/code\u003E command have four stage to run. First \u003Ccode\u003EInitialize\u003C/code\u003E stage, then run \u003Ccode\u003EProcess\u003C/code\u003E stage, after Process stage will run \u003Ccode\u003EParse\u003C/code\u003E stage. And the last stage is \u003Ccode\u003EFinalProcess\u003C/code\u003E.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode\u003Epublic void GenerateCommand(string filePath, GenerationStage stage){\n    if (stage != Generation.Initialize) return;\n    if (Path.GetExtension(filePath) != \u0026quot;.txt\u0026quot;) return;\n    Console.WriteLine(File.ReadAllText(filePath));\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2 id=\u0022Initialize stage\u0022\u003EInitialize stage\u003C/h2\u003E\n\u003Cp\u003E\u003Ccode\u003EInitialize\u003C/code\u003E stage is let your plugin register data. Not recommend you get data in this stage.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode\u003Epublic void GenerateCommand(string filePath, GenerationStage stage){\n    if (stage == GenerationStage.Initialize)\n    {\n        PluginHelper.registerObject(\u0026quot;msg\u0026quot;, \u0026quot;HelloWorld\u0026quot;);\n    }\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2 id=\u0022Process stage\u0022\u003EProcess stage\u003C/h2\u003E\n\u003Cp\u003E\u003Ccode\u003EProcess\u003C/code\u003E stage is let your plugin process data.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode\u003Epublic void GenerateCommand(string filePath, GenerationStage stage){\n    if (stage == GenerationStage.Process)\n    {\n        PluginHelper.getRegisteredObject\u0026lt;string\u0026gt;(\u0026quot;msg\u0026quot;, out string? msg);\n        if (msg != null)\n        {\n            Console.WriteLine(msg);\n        }\n    }\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2 id=\u0022Parse stage\u0022\u003EParse stage\u003C/h2\u003E\n\u003Cp\u003E\u003Ccode\u003EParse\u003C/code\u003E stage is let your plugin parse data.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode\u003Epublic void GenerateCommand(string filePath, GenerationStage stage){\n    if (stage == GenerationStage.Parse)\n    {\n        PluginHelper.getRegisteredObject\u0026lt;string\u0026gt;(\u0026quot;msg\u0026quot;, out string? msg);\n        if (msg != null)\n        {\n            PluginHelper.registerObject(\u0026quot;contentParsed\u0026quot;, $\u0026quot;\\\u0026quot;Message\\\u0026quot;: {msg}\u0026quot;);\n        }\n    }\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2 id=\u0022FinalProcess stage\u0022\u003EFinalProcess stage\u003C/h2\u003E\n\u003Cp\u003E\u003Ccode\u003EFinalProcess\u003C/code\u003E stage is let your plugin parse data.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode\u003Epublic void GenerateCommand(string filePath, GenerationStage stage){\n    if (stage == GenerationStage.FinalProcess)\n    {\n        PluginHelper.modifyRegisteredObject\u0026lt;string\u0026gt;(\u0026quot;contentParsed\u0026quot;, (ref string cp)=\u0026gt;{\n            cp = $\u0026quot;{cp}\u0026quot;;\n        });\n    }\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2 id=\u0022Confirm stage\u0022\u003EConfirm stage\u003C/h2\u003E\n\u003Cp\u003E\u003Ccode\u003EConfirm\u003C/code\u003E stage is let you access data, and in this stage is promise not write data.\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode\u003Epublic void GenerateCommand(string filePath, GenerationStage stage){\n    if (stage == GenerationStage.FinalProcess)\n    {\n        PluginHelper.modifyRegisteredObject\u0026lt;string\u0026gt;(\u0026quot;contentParsed\u0026quot;, (ref string cp)=\u0026gt;{\n            cp = $\u0026quot;{cp}\u0026quot;;\n        });\n    }\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch1 id=\u0022Command deploy\u0022\u003ECommand deploy\u003C/h1\u003E\n\u003Cp\u003ERun the command to deploy your blog website. Bbob have build-in GitDeploy plugin, please check for more information.\nTo implement \u003Ccode\u003Einit\u003C/code\u003E:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode\u003Epublic void DeployCommand()\n{\n    Console.WriteLine(\u0026quot;Bbob cli have running the deploy command\u0026quot;);\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch1 id=\u0022Command Complete\u0022\u003ECommand Complete\u003C/h1\u003E\n\u003Cp\u003EIf want doing something when command complete:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode\u003Epublic Action? CommandComplete(Commands c)\n{\n    Console.WriteLine($\u0026quot;{c} complete\u0026quot;);\n    return null;\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EReturn \u003Ccode\u003EAction?\u003C/code\u003E is delegate to do after command done. Eaxmple, \u003Ccode\u003ECommandComplete\u003C/code\u003E of \u003Ccode\u003Egenerate\u003C/code\u003E you can\u0027t get bbob.js file because is after CommandComplete to generate. If want get bbob.js file, you must get in the delegate function.\u003C/p\u003E\n\u003Ch2 id=\u0022Notice\u0022\u003ENotice\u003C/h2\u003E\n\u003Cp\u003ECommandComplete invoke when all plugin invoke.\u003C/p\u003E\n\u003C/div\u003E\u003C/article\u003E\u003Cscript\u003Ehljs.highlightAll()\u003C/script\u003E\n\n\u003Cdiv id=\u0022disqus_thread\u0022\u003E\u003C/div\u003E\r\n\u003Cscript\u003E\r\n    var disqus_config = function () {\r\n    // this.page.url = PAGE_URL;  // Replace PAGE_URL with your page\u0022s canonical URL variable\r\n    this.page.identifier = \u0022\\articles\\Plugin\\pluginDevelopment.md\u0022; // Replace \u0022\\articles\\Plugin\\pluginDevelopment.md\u0022 with your page\u0022s unique identifier variable\r\n    };\r\n    (function() { // DON\u0022T EDIT BELOW THIS LINE\r\n    var d = document, s = d.createElement(\u0022script\u0022);\r\n    s.src = \u0022https://bbobdoc.disqus.com/embed.js\u0022;\r\n    s.setAttribute(\u0022data-timestamp\u0022, \u002Bnew Date());\r\n    (d.head || d.body).appendChild(s);\r\n    })();\r\n\u003C/script\u003E\r\n\u003Cnoscript\u003EPlease enable JavaScript to view the \u003Ca href=\u0022https://disqus.com/?ref_noscript\u0022\u003Ecomments powered by Disqus.\u003C/a\u003E\u003C/noscript\u003E"}